import * as ethers from 'ethers';
import { privateProviderUrl, sepoliaProviderUrl } from './constants/RPCconstants';
import * as privateConstants from './constants/private';
import * as sepoliaConstants from './constants/sepolia'

export async function getPairAddress(provider, uniswap_factory_abi, UNISWAP_FACTORY_ADDRESS, token1, token2) {
    const factoryContract = new ethers.Contract(UNISWAP_FACTORY_ADDRESS, uniswap_factory_abi, provider);
    return await factoryContract.getPair(token1, token2);
}

export async function isContract(address, provider) {
    const code = await provider.getCode(address);
    return code && code !== '0x';
}

export async function getReserves(provider, uniswap_pair_abi, pairAddress) {
    const pairContract = new ethers.Contract(pairAddress, uniswap_pair_abi, provider);
    
    try {
        const reserves = await pairContract.getReserves();
        const token0Address = await pairContract.token0();
        const token1Address = await pairContract.token1();

        return {
            reserve0: reserves[0],  
            reserve1: reserves[1],  
            token0Address,
            token1Address
        };
    } catch (error) {

      //  console.error(`Error fetching reserves for pairAddress ${pairAddress}`, error);
        return null;
    }
}


export async function getReservesETH(provider, uniswap_pair_abi, pairAddress, WETH_ADDRESS) {
    const pairContract = new ethers.Contract(pairAddress, uniswap_pair_abi, provider);
    
    try {
        let [reserve0, reserve1] = await pairContract.getReserves();
        const token0Address = await pairContract.token0();
        const token1Address = await pairContract.token1();

            // If token0 is not WETH, swap the reserves
            if (token0Address !== WETH_ADDRESS) {
                [reserve0, reserve1] = [reserve1, reserve0];
            }
        
            const reserveWETH = reserve0;  // now reserve0 is always for WETH
            const reserveToken = reserve1;

        return {
            reserve0: reserveWETH,
            reserve1: reserveToken,
            token0Address,
            token1Address
        };
    } catch (error) {

      //  console.error(`Error fetching reserves for pairAddress ${pairAddress}`, error);
        return null;
    }
}


export async function getAllTokenHolders(contractAddress, provider, simple_token_abi) {

    const contract = new ethers.Contract(contractAddress, simple_token_abi, provider);

    let addressesSet = new Set();

    const transferFilter = contract.filters.Transfer(null, null);
    const logs = await provider.getLogs({
        fromBlock: 0,
        toBlock: 'latest',
        address: contractAddress,
        topics: transferFilter.topics
    });

    logs.forEach(log => {
        const decoded = contract.interface.parseLog(log);
        addressesSet.add(decoded.args.from);
        addressesSet.add(decoded.args.to);
    });

    const addresses = Array.from(addressesSet);
    const balances = {};
    // Generate array of promises for fetching balances in parallel
    const balancePromises = addresses.map(address => contract.balanceOf(address));
    const fetchedBalances = await Promise.all(balancePromises);

    // Convert the fetched balances array into a balances object
    for (let i = 0; i < addresses.length; i++) {
        balances[addresses[i]] = fetchedBalances[i].toString();
    }

    // Sort the balances in descending order
    const sortedBalances = Object.entries(balances).sort((a, b) => b[1] - a[1]);

    // Create an array of objects with address and balance properties
    const sortedBalancesArray = sortedBalances
        .filter(([address, balance]) => parseFloat(balance) !== 0 && address !== '0x0000000000000000000000000000000000000000')
        .map(([address, balance]) => ({ address, balance }));

    return sortedBalancesArray;
}


export function getConstantsForNetwork(network) {
    switch (network) {
      case 'private':
        return privateConstants;
      case 'sepolia':
        return sepoliaConstants;
      default:
        throw new Error('Invalid network specified.');
    }
  }
let provider;
let signer;

export async function initializeProviderFromCurrentNetwork() {
  if (!window.ethereum) {
    console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');
    return { error: 'Non-Ethereum browser detected' };
  }

  provider = new ethers.providers.Web3Provider(window.ethereum);
  const network = await provider.getNetwork();
  let selectedNetwork;

  switch (network.chainId) {
    case 0x2a: 
      selectedNetwork = 'private';
      break;
    case 0xaa36a7: 
      selectedNetwork = 'sepolia';
      break;
      default:
        throw new Error('Unsupported network detected. Please switch to the private or Sepolia network.');
    }

  return await initializeProvider(selectedNetwork);
}

export async function initializeProvider(selectedNetwork = 'private') {
  if (selectedNetwork !== 'private' && selectedNetwork !== 'sepolia') {
    console.error('Invalid network specified.');
    return { error: 'Invalid network specified' };
  }
  let providerUrl = selectedNetwork === 'private' ? privateProviderUrl : sepoliaProviderUrl;

  if (window.ethereum) {
    provider = new ethers.providers.Web3Provider(window.ethereum);
    // Request accounts access
    await window.ethereum.request({ method: 'eth_requestAccounts' });
  } else {
    provider = new ethers.providers.JsonRpcProvider(providerUrl);
    console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');
  }

  const network = selectedNetwork;
  signer = provider.getSigner();
  const account = await signer.getAddress();

  return { provider, signer, account, network };
}



const uniswap_factory_bytecode = "0x60806040526004361061019c5760003560e01c80636a627842116100ec578063ba9a7a561161008a578063d21220a711610064578063d21220a71461064d578063d505accf14610662578063dd62ed3e146106c0578063fff6cae9146106fb5761019c565b8063ba9a7a56146105f0578063bc25cf7714610605578063c45a0155146106385761019c565b80637ecebe00116100c65780637ecebe001461052357806389afcb441461055657806395d89b41146105a2578063a9059cbb146105b75761019c565b80636a627842146104a857806370a08231146104db5780637464fc3d1461050e5761019c565b806323b872dd116101595780633644e515116101335780633644e5151461042e578063485cc955146104435780635909c0d51461047e5780635a3d5493146104935761019c565b806323b872dd146103ab57806330adf81f146103ee578063313ce567146104035761019c565b8063022c0d9f1461019e57806306fdde03146102375780630902f1ac146102c1578063095ea7b3146103065780630dfe16811461035357806318160ddd14610384575b005b3480156101aa57600080fd5b5061019c600480360360808110156101c157600080fd5b8135916020810135916001600160a01b0360408301351691908101906080810160608201356401000000008111156101f857600080fd5b82018360208201111561020a57600080fd5b8035906020019184600183028401116401000000008311171561022c57600080fd5b509092509050610710565b34801561024357600080fd5b5061024c610c4b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561028657818101518382015260200161026e565b50505050905090810190601f1680156102b35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102cd57600080fd5b506102d6610c71565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b34801561031257600080fd5b5061033f6004803603604081101561032957600080fd5b506001600160a01b038135169060200135610c9b565b604080519115158252519081900360200190f35b34801561035f57600080fd5b50610368610cb2565b604080516001600160a01b039092168252519081900360200190f35b34801561039057600080fd5b50610399610cc1565b60408051918252519081900360200190f35b3480156103b757600080fd5b5061033f600480360360608110156103ce57600080fd5b506001600160a01b03813581169160208101359091169060400135610cc7565b3480156103fa57600080fd5b50610399610d61565b34801561040f57600080fd5b50610418610d85565b6040805160ff9092168252519081900360200190f35b34801561043a57600080fd5b50610399610d8a565b34801561044f57600080fd5b5061019c6004803603604081101561046657600080fd5b506001600160a01b0381358116916020013516610d90565b34801561048a57600080fd5b50610399610e14565b34801561049f57600080fd5b50610399610e1a565b3480156104b457600080fd5b50610399600480360360208110156104cb57600080fd5b50356001600160a01b0316610e20565b3480156104e757600080fd5b50610399600480360360208110156104fe57600080fd5b50356001600160a01b0316611120565b34801561051a57600080fd5b50610399611132565b34801561052f57600080fd5b506103996004803603602081101561054657600080fd5b50356001600160a01b0316611138565b34801561056257600080fd5b506105896004803603602081101561057957600080fd5b50356001600160a01b031661114a565b6040805192835260208301919091528051918290030190f35b3480156105ae57600080fd5b5061024c6114f0565b3480156105c357600080fd5b5061033f600480360360408110156105da57600080fd5b506001600160a01b038135169060200135611512565b3480156105fc57600080fd5b5061039961151f565b34801561061157600080fd5b5061019c6004803603602081101561062857600080fd5b50356001600160a01b0316611525565b34801561064457600080fd5b50610368611690565b34801561065957600080fd5b5061036861169f565b34801561066e57600080fd5b5061019c600480360360e081101561068557600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356116ae565b3480156106cc57600080fd5b50610399600480360360408110156106e357600080fd5b506001600160a01b03813581169160200135166118b0565b34801561070757600080fd5b5061019c6118cd565b600c5460011461075b576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c558415158061076e5750600084115b6107a95760405162461bcd60e51b81526004018080602001828103825260258152602001806122e06025913960400191505060405180910390fd5b6000806107b4610c71565b5091509150816001600160701b0316871080156107d95750806001600160701b031686105b6108145760405162461bcd60e51b81526004018080602001828103825260218152602001806123296021913960400191505060405180910390fd5b60065460075460009182916001600160a01b039182169190811690891682148015906108525750806001600160a01b0316896001600160a01b031614155b61089b576040805162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b604482015290519081900360640190fd5b8a156108ac576108ac828a8d611a2f565b89156108bd576108bd818a8c611a2f565b861561097857886001600160a01b03166310d1e85c338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561095f57600080fd5b505af1158015610973573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156109be57600080fd5b505afa1580156109d2573d6000803e3d6000fd5b505050506040513d60208110156109e857600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b158015610a3457600080fd5b505afa158015610a48573d6000803e3d6000fd5b505050506040513d6020811015610a5e57600080fd5b5051925060009150506001600160701b0385168a90038311610a81576000610a90565b89856001600160701b03160383035b9050600089856001600160701b0316038311610aad576000610abc565b89856001600160701b03160383035b90506000821180610acd5750600081115b610b085760405162461bcd60e51b81526004018080602001828103825260248152602001806123056024913960400191505060405180910390fd5b6000610b3c610b1e84600363ffffffff611bc916565b610b30876103e863ffffffff611bc916565b9063ffffffff611c2c16565b90506000610b54610b1e84600363ffffffff611bc916565b9050610b85620f4240610b796001600160701b038b8116908b1663ffffffff611bc916565b9063ffffffff611bc916565b610b95838363ffffffff611bc916565b1015610bd7576040805162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b604482015290519081900360640190fd5b5050610be584848888611c7c565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6040518060400160405280600a8152602001692ab734b9bbb0b8102b1960b11b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610ca8338484611e41565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610d4c576001600160a01b0384166000908152600260209081526040808320338452909152902054610d27908363ffffffff611c2c16565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610d57848484611ea3565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610de6576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c54600114610e6d576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c81905580610e7d610c71565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610ed157600080fd5b505afa158015610ee5573d6000803e3d6000fd5b505050506040513d6020811015610efb57600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610f4e57600080fd5b505afa158015610f62573d6000803e3d6000fd5b505050506040513d6020811015610f7857600080fd5b505190506000610f97836001600160701b03871663ffffffff611c2c16565b90506000610fb4836001600160701b03871663ffffffff611c2c16565b90506000610fc28787611f5d565b60005490915080610fff57610feb6103e8610b30610fe6878763ffffffff611bc916565b6120bb565b9850610ffa60006103e861210d565b61104e565b61104b6001600160701b03891661101c868463ffffffff611bc916565b8161102357fe5b046001600160701b03891661103e868563ffffffff611bc916565b8161104557fe5b046121a3565b98505b6000891161108d5760405162461bcd60e51b81526004018080602001828103825260288152602001806123726028913960400191505060405180910390fd5b6110978a8a61210d565b6110a386868a8a611c7c565b81156110d3576008546110cf906001600160701b0380821691600160701b90041663ffffffff611bc916565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c54600114611198576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c819055806111a8610c71565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561120457600080fd5b505afa158015611218573d6000803e3d6000fd5b505050506040513d602081101561122e57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561127c57600080fd5b505afa158015611290573d6000803e3d6000fd5b505050506040513d60208110156112a657600080fd5b5051306000908152600160205260408120549192506112c58888611f5d565b600054909150806112dc848763ffffffff611bc916565b816112e357fe5b049a50806112f7848663ffffffff611bc916565b816112fe57fe5b04995060008b118015611311575060008a115b61134c5760405162461bcd60e51b815260040180806020018281038252602881526020018061234a6028913960400191505060405180910390fd5b61135630846121bb565b611361878d8d611a2f565b61136c868d8c611a2f565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b1580156113b257600080fd5b505afa1580156113c6573d6000803e3d6000fd5b505050506040513d60208110156113dc57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561142857600080fd5b505afa15801561143c573d6000803e3d6000fd5b505050506040513d602081101561145257600080fd5b5051935061146285858b8b611c7c565b81156114925760085461148e906001600160701b0380821691600160701b90041663ffffffff611bc916565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b604051806040016040528060068152602001652aa72496ab1960d11b81525081565b6000610ca8338484611ea3565b6103e881565b600c54600114611570576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b03948516949093169261161f928592879261161a926001600160701b03169185916370a0823191602480820192602092909190829003018186803b1580156115e257600080fd5b505afa1580156115f6573d6000803e3d6000fd5b505050506040513d602081101561160c57600080fd5b50519063ffffffff611c2c16565b611a2f565b600854604080516370a0823160e01b81523060048201529051611686928492879261161a92600160701b90046001600160701b0316916001600160a01b038616916370a0823191602480820192602092909190829003018186803b1580156115e257600080fd5b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b428410156116f8576040805162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015611813573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906118495750886001600160a01b0316816001600160a01b0316145b61189a576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b6118a5898989611e41565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600c54600114611918576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c55600654604080516370a0823160e01b81523060048201529051611a28926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561196957600080fd5b505afa15801561197d573d6000803e3d6000fd5b505050506040513d602081101561199357600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156119e057600080fd5b505afa1580156119f4573d6000803e3d6000fd5b505050506040513d6020811015611a0a57600080fd5b50516008546001600160701b0380821691600160701b900416611c7c565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611adc5780518252601f199092019160209182019101611abd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611b3e576040519150601f19603f3d011682016040523d82523d6000602084013e611b43565b606091505b5091509150818015611b71575080511580611b715750808060200190516020811015611b6e57600080fd5b50515b611bc2576040805162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b5050505050565b6000811580611be457505080820282828281611be157fe5b04145b610cac576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610cac576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160701b038411801590611c9a57506001600160701b038311155b611ce1576040805162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b90048116820390811615801590611d1157506001600160701b03841615155b8015611d2557506001600160701b03831615155b15611d96578063ffffffff16611d5385611d3e86612259565b6001600160e01b03169063ffffffff61226b16565b600980546001600160e01b03929092169290920201905563ffffffff8116611d7e84611d3e87612259565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316600090815260016020526040902054611ecc908263ffffffff611c2c16565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611f01908263ffffffff61229016565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611fae57600080fd5b505afa158015611fc2573d6000803e3d6000fd5b505050506040513d6020811015611fd857600080fd5b5051600b546001600160a01b0382161580159450919250906120a75780156120a257600061201b610fe66001600160701b0388811690881663ffffffff611bc916565b90506000612028836120bb565b90508082111561209f576000612056612047848463ffffffff611c2c16565b6000549063ffffffff611bc916565b9050600061207b8361206f86600563ffffffff611bc916565b9063ffffffff61229016565b9050600081838161208857fe5b049050801561209b5761209b878261210d565b5050505b50505b6120b3565b80156120b3576000600b555b505092915050565b600060038211156120fe575080600160028204015b818110156120f8578091506002818285816120e757fe5b0401816120f057fe5b0490506120d0565b50612108565b8115612108575060015b919050565b600054612120908263ffffffff61229016565b60009081556001600160a01b03831681526001602052604090205461214b908263ffffffff61229016565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106121b257816121b4565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546121e4908263ffffffff611c2c16565b6001600160a01b03831660009081526001602052604081209190915554612211908263ffffffff611c2c16565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161228857fe5b049392505050565b80820182811015610cac576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe556e697377617056323a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f494e5055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f4c4951554944495459556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4d494e544544a265627a7a72315820ff41d7e1fce1272b6ae6974dad63cd9afc8b84220cb50babaa1412d0a724420564736f6c63430005100032";

export async function isPair(address, provider) {
    const contractBytecode = await provider.getCode(address);
    const referenceBytecode = uniswap_factory_bytecode;
    return contractBytecode === referenceBytecode;
}